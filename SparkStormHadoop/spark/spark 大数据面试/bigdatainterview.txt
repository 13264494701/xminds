
##hadoop基础面试题：
0、hadoop调优
1、避免输入大量小文件。大量的小文件(不足一个block大小)作为输入数据会产生很多的Map任务(默认一个分片对应一个Map任务)，而每个Map任务实际工作量又非常小，系统要花更多的时间来将这些Map任务的输出进行整合。如果将大量的小文件进行预处理合并成一个或几个大文件，任务执行的效率可能会提升几十倍。可手动将小文件合并成大文件，或通过Hadoop的SequenceFile、CombineFileInputFormat将多个文件打包到一个输入单元中，使得每个Map处理更多的数据，从而提高性能。
2、预判并过滤无用数据。可以使用一些过滤工具，在作业执行之前将数据中无用的数据进行过滤，可极大提高MapReduce执行效率。Bloom Filter是一种功能强大的过滤器，执行效率高，时间复杂度为O(1)，缺点是存在一定的误判可能，详细参考《Bloom Filter概念和原理》。当将一个非常大的表和一个非常小的表进行表连接操作时，可以使用Bloom Filter将小表数据作为Bloom Filter的输入数据，将大表的原始数据进行过滤(过滤不通过的数据一定是不可用的，过滤通过的数据可能有用可能无用)，可提高程序执行的效率。
3、合理使用分布式缓存DistributedCache。DistributedCache可以将一些字典、jar包、配置文件等缓存到需要执行map任务的节点中，避免map任务多次重复读取这些资源，尤其在join操作时，使用DistributedCache缓存小表数据在map端进行join操作，可避免shuffle、reduce等操作，提高程序运行效率。

4、重用Writable类型。避免大量多次new这些Writable对象，这会花费java垃圾收集器大量的清理工作，建议在map函数外定义这些Writable对象
1、简单描述如何安装配置一个apache开源版hadoop，只描述即可，无需列出完整步骤，能列出步骤更好。
1) 安装JDK并配置环境变量（/etc/profile）
2) 关闭防火墙
3) 配置hosts文件，方便hadoop通过主机名访问（/etc/hosts）
4) 设置ssh免密码登录
5) 解压缩hadoop安装包，并配置环境变量
6) 修改配置文件（$HADOOP_HOME/conf）
hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml
7) 格式化hdfs文件系统 （hadoop namenode -format）
8) 启动hadoop （$HADOOP_HOME/bin/start-all.sh）
9) 使用jps查看进程

2、请列出正常工作的hadoop集群中hadoop都分别需要启动那些进程，他们的作用分别是什么，尽可能写的全面些。
1) NameNode: HDFS的守护进程，负责记录文件是如何分割成数据块，以及这些数据块分别被存储到那些数据节点上，它的主要功能是对内存及IO进行集中管理
2) Secondary NameNode：辅助后台程序，与NameNode进行通信，以便定期保存HDFS元数据的快照。
3) DataNode：负责把HDFS数据块读写到本地的文件系统。
4) JobTracker：负责分配task，并监控所有运行的task。
5) TaskTracker：负责执行具体的task，并与JobTracker进行交互。

3、请列出你所知道的hadoop调度器，并简要说明其工作方法。
比较流行的三种调度器有：默认调度器FIFO，计算能力调度器Capacity Scheduler，公平调度器Fair Scheduler
1) 默认调度器FIFO
hadoop中默认的调度器，采用先进先出的原则
2) 计算能力调度器Capacity Scheduler
选择占用资源小，优先级高的先执行
3) 公平调度器Fair Scheduler
同一队列中的作业公平共享队列中所有资源

4、Hive有那些方式保存元数据的，各有那些特点。
1) 内存数据库derby，较小，不常用
2) 本地mysql，较常用
3) 远程mysql，不常用

5、请简述hadoop怎样实现二级排序。
在Hadoop中，默认情况下是按照key进行排序，如果要按照value进行排序怎么办？
有两种方法进行二次排序，分别为：buffer and in memory sort和 value-to-key conversion。

buffer and in memory sort
主要思想是：在reduce()函数中，将某个key对应的所有value保存下来，然后进行排序。 这种方法最大的缺点是：可能会造成out of memory。

value-to-key conversion
主要思想是：将key和部分value拼接成一个组合key（实现WritableComparable接口或者调setSortComparatorClass函数），这样reduce获取的结果便是先按key排序，后按value排序的结果，需要注意的是，用户需要自己实现Paritioner，以便只按照key进行数据划分。Hadoop显式的支持二次排序，在Configuration类中有个setGroupingComparatorClass()方法，可用于设置排序group的key值。《Hadoop&Spark解决二次排序问题(Hadoop篇)》

6、简述hadoop实现Join的几种方法。
(1)、reduce side join
reduce side join是一种最简单的join方式，其主要思想如下：
在map阶段，map函数同时读取两个文件File1和File2，为了区分两种来源的key/value数据对，对每条数据打一个标签（tag）,比如：tag=0表示来自文件File1，tag=2表示来自文件File2。即：map阶段的主要任务是对不同文件中的数据打标签。
在reduce阶段，reduce函数获取key相同的来自File1和File2文件的value list， 然后对于同一个key，对File1和File2中的数据进行join（笛卡尔乘积）。即：reduce阶段进行实际的连接操作。

(2)、map side join
之所以存在reduce side join，是因为在map阶段不能获取所有需要的join字段，即：同一个key对应的字段可能位于不同map中。Reduce side join是非常低效的，因为shuffle阶段要进行大量的数据传输。
Map side join是针对以下场景进行的优化：两个待连接表中，有一个表非常大，而另一个表非常小，以至于小表可以直接存放到内存中。这样，我们可以将小表复制多份，让每个map task内存中存在一份（比如存放到hash table中），然后只扫描大表：对于大表中的每一条记录key/value，在hash table中查找是否有相同的key的记录，如果有，则连接后输出即可。
为了支持文件的复制，Hadoop提供了一个类DistributedCache，使用该类的方法如下：
（1）用户使用静态方法DistributedCache.addCacheFile()指定要复制的文件，它的参数是文件的URI（如果是HDFS上的文件，可以这样：hdfs://namenode:9000/home/XXX/file，其中9000是自己配置的NameNode端口号）。JobTracker在作业启动之前会获取这个URI列表，并将相应的文件拷贝到各个TaskTracker的本地磁盘上。（2）用户使用DistributedCache.getLocalCacheFiles()方法获取文件目录，并使用标准的文件读写API读取相应的文件。

(3)、SemiJoin
SemiJoin，也叫半连接，是从分布式数据库中借鉴过来的方法。它的产生动机是：对于reduce side join，跨机器的数据传输量非常大，这成了join操作的一个瓶颈，如果能够在map端过滤掉不会参加join操作的数据，则可以大大节省网络IO。
实现方法很简单：选取一个小表，假设是File1，将其参与join的key抽取出来，保存到文件File3中，File3文件一般很小，可以放到内存中。在map阶段，使用DistributedCache将File3复制到各个TaskTracker上，然后将File2中不在File3中的key对应的记录过滤掉，剩下的reduce阶段的工作与reduce side join相同。

(4)、reduce side join + BloomFilter
在某些情况下，SemiJoin抽取出来的小表的key集合在内存中仍然存放不下，这时候可以使用BloomFiler以节省空间。
BloomFilter最常见的作用是：判断某个元素是否在一个集合里面。它最重要的两个方法是：add() 和contains()。最大的特点是不会存在false negative，即：如果contains()返回false，则该元素一定不在集合中，但会存在一定的true negative，即：如果contains()返回true，则该元素可能在集合中。
因而可将小表中的key保存到BloomFilter中，在map阶段过滤大表，可能有一些不在小表中的记录没有过滤掉（但是在小表中的记录一定不会过滤掉），这没关系，只不过增加了少量的网络IO而已。

7、请简述MapReduce中combiner、partition的作用
(1)、combiner
有时一个map可能会产生大量的输出，combiner的作用是在map端对输出先做一次合并，以减少网络传输到reducer的数量。
注意：mapper的输出为combiner的输入，reducer的输入为combiner的输出。

(2)、partition
把map任务输出的中间结果按照key的范围划分成R份(R是预先定义的reduce任务的个数)，划分时通常使用hash函数，如：hash(key) mod R
这样可以保证一段范围内的key，一定会由一个reduce任务来处理。




##Hadoop面试题系列(1/11)

1.请说说hadoop1的HA如何实现？

 1.1部署两台namenode节点，形成主备模式（active/standby模式），这样一旦active节点宕机，standby节点立即切换到active模式。事实上HA机制就是采取的这种方案。
为什么选择主备模式，而不是主主模式（active/active模式），也即让两个namenode节点都响应客户端的请求一个显然的前提是，两台namenode节点需要保存一致的元数据。
我们知道namenode节点是用来管理这些元数据的，响应客户端请求时（上传）需要增加元数据信息，如果使用主主模式，那么两个节点都将对元数据进行写操作，怎么同步是个很困难的问题。因此，只能有一台机器响应请求，也即处在active状态的节点（可称为主节点），而另一台namenode在主节点正常工作情况下仅用来同步active节点的元数据信息，这个namenode称为备用节点（处在standby状态），可见，要解决的问题主要是怎么同步active节点的元数据信息。

1.2.怎么同步两个namenode节点的元数据
 响应客户端请求的是active节点，因此只有active节点保存了最新的元数据。元数据分为两部分，一部分是刚写入新的元数据（edits），另一部分是合并后的较旧的（fsimage）。HA机制解决同步问题的方法是将active节点新写入的edits元数据放在zookeeper集群上（zookeeper集群主要功能是实现少量数据的分布式同步管理），standby节点在active节点正常情况下只需要将zookeeper集群上edits文件同步到自己的fsimage中就可以。Hadoop框架为这个集群专门写了个分布式应用qjournal（依赖zookeeper实现），实现qjournal的节点称为journalnode。

1.3怎么感知active节点是否宕机，并将standby节点快速切换到active状态？
解决方案是专门在namenode节点上启动一个监控进程，时刻监控namenode的状态。对于处在active状态的namenode，如果发现不正常就向zookeeper集群中写入一些数据。对于处在standby状态的namenode，监控进程从zookeeper集群中读数据，从而感知到active节点是否正常。如果发现异常，监控进程负责将standby状态切换到active状态。这个监控进程在hadoop中叫做zkfc（依赖zookeeper实现）。

1.4如何在状态切换时避免brain split(脑裂)？
脑裂：active namenode工作不正常后，zkfc在zookeeper中写入一些数据，表明异常，这时standby namenode中的zkfc读到异常信息，并将standby节点置为active。但是，如果之前的active namenode并没有真的死掉，出现了假死（死了一会儿后又正常了，哈哈，是不是很搞笑），这样，就有两台namenode同时工作了。这种现象称为脑裂。
解决方案：standby namenode感知到主用节点出现异常后并不会立即切换状态，zkfc会首先通过ssh远程杀死active节点的 namenode进程（kill -9 进程号）。但是（这样还不行，惊讶），如果kill指令没有执行成功咋办？？如果在一段时间内没有收到执行成功的回执，standby节点会执行一个自定义脚本，尽量保证不会出现脑裂问题！这个机制在hadoop中称为fencing（包括ssh发送kill指令，执行自定义脚本两道保障）解决上诉问题以后，基本上就实现了hadoop HA 。

Q1.列举出hadoop中定义的最常用的InputFormats。哪个是默认的？
Ans: hadoop中定义的最常见的InputFormats有TextInputFormat，KeyValueInputFormat，SequenceFileInputFormat。默认的InputFormats是TextInputFormats。

Q2. TextInputFormat和KeyValueInputFormat类之间的不同之处在于哪里？
Ans: TextInputFormat读取文本文件中的所有行，提供了行的偏移作为Mapper的键，实际的行作为mapper的值。
KeyValueInputFormat读取文本文件，解析所有行到中，首个空格前的字符是mapper的key，行的其余部分则是mapper的值。

Q3. hadoop中的InputSplit是什么？
Ans: 当一个hadoop job 运行时，它将输入文件拆分成块，分配每个块给各个mapper处理。这称为Input Split。

Q4. hadoop框架中文件拆分是如何被触发的？
Ans: 通过运行输入格式类中的getInputSplit()方法。

Q5. 考虑一种情况：Map/Reduce系统中，HDFS块大小事64MB，输入格式FileInputFormat，有三个文件64K，65MB，127MB，那么有hadoop框架会将输入划分成多少？
Ans:hadoop将会做5个拆分，64K文件拆分1个，65MB文件拆分2个，127MB文件拆分2个。

Q6. hadoop中的RecordReader的目的是什么？
Ans: InputSplit已经定义了部分工作，但没有描述如何访问它。RecordReader类实际从它的源加载数据，并转换成适合Mapper读取。RecordReader示例由InputFormat定义。

Q7. 如果hadoop中没有定义定制分区，那么如何在输出到reducer前执行数据分区？
Ans: 默认的分区器为各个键计算一个哈希值，并分配给基于这个结果的分区。

Q8. 什么是Combiner？
Ans: Combiner是一个最小删减的过程，处理由mapper产生的数据。Combiner将会接收某个节点上由mapper实例发送的所有数据。Combiner的输出被送到Reducer，代替Mapper的输出。


Q9.什么是jobtracker？jobtracker有哪些特别的函数？
JobTracker是整个MapReduce计算框架中的主服务，相当于集群的“管理者”，负责整个集群的作业控制和资源管理。本文对JobTracker的启动过程及心跳接收与应答两个主要功能进行分析。
JobTracker将下达给TaskTracker的命令封装成TaskTrackerAction类，主要包括ReinitTrackerAction(重新初始化)、LauchTaskAction(运行新任务)、KillTaskAction(杀死任务)、KillJobAction(杀死作业)和CommitTaskAction(提交任务)五种

9.hadoop中job和task之间是什么关系？
http://www.cnblogs.com/forfuture1978/archive/2010/11/14/1877086.html
Job是关于整个输入数据和面向整个集群（还没有分机器）的概念，task一般是处理输入数据的子集，并且和集群中的具体一台机器相联系。
10.假设hadoop一个job产生了100个task，其中一个task失败了，hadoop会如何处理？
http://blog.csdn.net/bigdatahappy/article/details/12504833
hadoop本身的一个设计理念就是在普通的pc硬件上构建高可靠性的系统，任何failed task都不会引起整个job的失败，因为所有失败的任务都会被重新执行（reschedule execution），只有当重新执行的次数超过4次，才会把这任务标记为失败，导致整个job的失败。

Task的运行情况由对应的一个TaskInProgress对象来跟踪，它允许一个Task尝试运行多次，每次成为一个Task Attempt
Hadoop提供了两个可配置的参数：
     mapred.map.max.attempts 
     mapred.reduce.max.attempts
hadoop提交作业时可通过设置这两个参数来设置Map Task和Reduce Task尝试运行最大次数。
默认情况下，这两个值均为4。
如果尝试4次之后仍旧为运行成功，则TaskInProgress对象将该任务运行状态标注成FAILED。
未成功运行的Task Attempt分为两种，killed task 和failed task，他们分别对应的状态为KILLED,FAILED其中killed task 是MapReduce框架主动杀死的Task Attempt，一般产生于一下3中场景。

11.hadoop推测执行是如何实现的？
	
推测执行(Speculative Execution)是指在集群环境下运行MapReduce，可能是程序Bug，负载不均或者其他的一些问题，导致在一个JOB下的多个TASK速度不一致，比如有的任务已经完成，但是有些任务可能只跑了10%，根据木桶原理，这些任务将成为整个JOB的短板，如果集群启动了推测执行，这时为了最大限度的提高短板，Hadoop会为该task启动备份任务，让speculative task与原始task同时处理一份数据，哪个先运行完，则将谁的结果作为最终结果，并且在运行完成后Kill掉另外一个任务。

推测执行(Speculative Execution)是通过利用更多的资源来换取时间的一种优化策略，但是在资源很紧张的情况下，推测执行也不一定能带来时间上的优化，假设在测试环境中，DataNode总的内存空间是40G，每个Task可申请的内存设置为1G，现在有一个任务的输入数据为5G，HDFS分片为128M，这样Map Task的个数就40个，基本占满了所有的DataNode节点，如果还因为每些Map Task运行过慢，启动了Speculative Task，这样就可能会影响到Reduce Task的执行了，影响了Reduce的执行，自然而然就使整个JOB的执行时间延长。所以是否启用推测执行，如果能根据资源情况来决定，如果在资源本身就不够的情况下，还要跑推测执行的任务，这样会导致后续启动的任务无法获取到资源，以导致无法执行。

12.关系型数据库有什么弱点？
很难进行分布式部署，I/O瓶颈显著，依赖于强大的服务器，需要花更大的代价才能突破性能极限
很难处理非结构化数据

13.什么情况下使用hbase？
适合海量的，但同时也是简单的操作（例如：key-value）
成熟的数据分析主题，查询模式已经确定并且不会轻易改变。
传统的关系型数据库已经无法承受负荷，高速插入，大量读取

14.有一千万条短信，有重复，以文本文件的形式保存，一行一条，有重复。请用5分钟时间，找出重复出现最多的前10条。
分析：
常规方法是先排序，在遍历一次，找出重复最多的前10条。但是排序的算法复杂度最低为nlgn。可以设计一个 hash_table, hash_map,依次读取一千万条短信，加载到hash_table表中，并且统计重复的次数，与此同时维护一张最多10条的短信表。这样遍历一次就能找出最多的前10条，算法复杂度为 O(n)。


##hadoop面试题（2/11）
1.hbase怎么预分区？
如果知道Hbase数据表的key的分布情况，就可以在建表的时候对hbase进行region的预分区。这样做的好处是防止大数据量插入的热点问题，提高数据插入的效率
规划hbase预分区
首先就是要想明白数据的key是如何分布的，然后规划一下要分成多少region，每个region的startkey和endkey是多少，然后将规划的key写到一个文件中。比如，key的前几位字符串都是从0001~0010的数字，这样可以分成10个region

2.hbase怎么给web前台提供接口来访问？
	hbase有一个web的默认端口60010，是提供客户端用来访问hbase的

3.htable API有没有线程安全问题，在程序中是单例还是多例？
	不是线程安全的，单利。
4.hbase有没有并发问题？
	有并发问题，
5.metaq消息队列，zookeeper集群，storm集群，就可以完成对商城推荐系统功能吗？还有没有其他的中间件？
不能，还需要hadoop存储日志，做基于物品或者用户推荐
	
6.storm 怎么完成对单词的计数？
spolt对输入进行 split 成(word,1) 发给bolt，用hashmap存储，有key则+1 ，否则为1 然后输出。

7.hdfs的client端，复制到第三个副本时宕机， hdfs怎么恢复保证下次写第三副本?

如果NameNode节点挂了，可以按照如下步骤来从Secondary NameNode来恢复：
在dfs.name.dir指定的位置建立一个空文件夹
从Secondary NameNode上把secondname的目录给scp到新的NameNode机器的fs.checkpoint.dir下
使用hadoop/bin/hadoop namenode -importCheckpoint来启动NameNode，主要不要执行format命令
使用hadoop fsck /user命令检查文件Block的完整性

8.block块信息是先写dataNode还是先写nameNode?
先写datanode，并周期性的汇报给namenode

9.Hadoop生态圈中各种框架的运用场景？

10.hive中的压缩格式RCFile、TextFile、SequenceFile各有什么区别？
Hive默认格式，数据不做压缩，磁盘开销大，数据解析开销大。
SequenceFile是Hadoop API 提供的一种二进制文件，它将数据以<key,value>的形式序列化到文件中。这种二进制文件内部使用Hadoop 的标准的Writable 接口实现序列化和反序列化。它与Hadoop API中的MapFile 是互相兼容的。Hive 中的SequenceFile 继承自Hadoop API 的SequenceFile，不过它的key为空，使用value 存放实际的值， 这样是为了避免MR 在运行map 阶段的排序过程。
RCFile是Hive推出的一种专门面向列的数据格式。 它遵循“先按行划分，再垂直划分”的设计理念。当查询过程中，针对它并不关心的列时，它会在IO上跳过这些列。需要说明的是，RCFile在map阶段从 远端拷贝仍然是拷贝整个数据块，并且拷贝到本地目录后RCFile并不是真正直接跳过不需要的列，并跳到需要读取的列， 而是通过扫描每一个row group的头部定义来实现的，但是在整个HDFS Block 级别的头部并没有定义每个列从哪个row group起始到哪个row group结束。所以在读取所有列的情况下，RCFile的性能反而没有SequenceFile高。
11.说明 Hadoop 2.0 的基本构成。
一、Hadoop 1.0中HDFS和MapReduce在高可用、扩展性等方面存在问题
1、HDFS存在问题
NameNode单点故障，难以应用于在线场景
NameNode压力过大，且内存受限，影响系统可扩展性

2、MapReduce存在的问题
JobTracker访问压力大，影响系统可扩展性
难以支持除MapReduce计算框架之外的计算框架、比如spark、storm
一、Hadoop2.x由HDFS、MapReduce、和YARN三个分支构成
1、HDFS: NNFederation 、HA 多了这两个部分
2、MapReduce：运行在YARN上的MR
3、YARN:是对应的资源管理系统

12.相比于 HDFS1.0, HDFS 2.0最主要的改进在哪几方面？
一、解决HDFS1.0中单点故障和内存受限问题
二、解决单点故障
1、HDFSHA: 通过主备NameNode解决单点故障
2、如果主NameNode发生故障，则切换到备NameNode
三、解决内存受限问题
1、HDFSFederation（联邦）解决内存受限问题 把数据分为多份 多个NameNode相互独立工作，共享DataNode
2、水平扩展，支持多个NameNode
3、每个NameNode分管一部分目录
4、所有NameNode共享所有DataNode存储资源
四、2.X仅仅是架构上做了变化，使用方式不变
1、 对HDFS使用者透明
2、HDFS1.X中的命令和API仍可以使用
13.试使用"步骤 1，步骤 2，步骤 3…" 说明YARN中运行应用程序的基本流程。
步骤1　用户向YARN中提交应用程序，其中包括ApplicationMaster程序、启动ApplicationMaster的命令、用户程序等。

步骤2　ResourceManager为该应用程序分配第一个Container（这里可以理解为一种资源比如内存），并与对应的Node-Manager通信，要求它在这个Container中启动应用程序的ApplicationMaster。

步骤3　ApplicationMaster首先向ResourceManager注册，这样用户可以直接通过ResourceManage查看应用程序的运行状态，然后它将为各个任务申请资源，并监控它的运行状态，直到运行结束，即重复步骤4~7。

步骤4　ApplicationMaster采用轮询的方式通过RPC协议向ResourceManager申请和领取资源。

步骤5　一旦ApplicationMaster申请到资源后，便与对应的NodeManager通信，要求它启动任务。

步骤6　NodeManager为任务设置好运行环境（包括环境变量、JAR包、二进制程序等）后，将任务启动命令写到一个脚本中，并通过运行该脚本启动任务。

步骤7　各个任务通过某个RPC协议向ApplicationMaster汇报自己的状态和进度，以让ApplicationMaster随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务。
在应用程序运行过程中，用户可随时通过RPC向ApplicationMaster查询应用程序的当前运行状态。

步骤8　应用程序运行完成后，ApplicationMaster向ResourceManager注销并关闭自己。
14.MapReduce2.0中，MRAppMaster主要作用是什么？MRAppMaster如何实现任务容错的？
1、将MapReduce作业直接运行在YARN上，而不是由JobTracker和TaskTracker构建的MRv1系统中
2、基本功能模块
YARN:负责资源管理和调度
MRAppMaster：负责任务切分、任务调度、任务监控和容错等
MapTask/ReduceTask:任务驱动引擎、与MRv1一致
3、每个MapReduce作业对应一个MRAppMaster
MRappMater任务调度
YARN将资源分配给MRAppMaster
MRAppMaster进一步将资源分配给内部的任务
4、MRAppMaster容错
失败后，由YARN重新启动
任务失败后，MRAppMaster重新申请资源

15.为什么会产生yarn, 它解决了什么问题，有什么优势？
一：YARN :Yet Another Resource Negotiator;
1、Hadoop2.0新引入的资源管理系统，直接从MRv1演化而来，分别由ResourceManager和ApplicationMaster进程实现
2、ResourceManager：负责整个集群的资源管理和调度
3、ApplicationMaster：负责应用程序相关的事务，比如任务调度、任务监控、容错等

二：YARN的引入，使得多个计算框架可运行在一个集群中
1、每个应用程序对应一个ApplicationMater
2、目前多个计算框架可以运行在YARN上，比如，MapReduce、Spark、Storm等
ResourceManager负责资源管理，只有一个，ApplicationMaster有多个，每个datanode上都会有一个


##Hadoop面试题系列(3/11)

1. 集群多少台, 数据量多大, 吞吐量是多大, 每天处理多少G的数据？

2. 我们的日志是不是除了apache的访问日志是不是还有其他的日志？

3. 假设我们有其他的日志是不是可以对这个日志有其他的业务分析？这些业务分析都有什么？

4. 你们的服务器有多少台？服务器的内存多大？

5. 你们的服务器怎么分布的？（这里说地理位置分布，最好也从机架方面也谈谈）

6. 你平常在公司都干些什么（一些建议）

7. 你们的集群规模？

537台。

8. 你们的数据是用什么导入到数据库的？导入到什么数据库？
处理之前的导入：通过 hadoop 命令导入到 hdfs 文件系统
处理完成之后的导出：利用 hive 处理完成之后的数据，通过 sqoop 导出到 mysql 数据库中，以供报表层使用。

9. 你们业务数据量多大？有多少行数据？
开发时使用的是部分数据，不是全量数据，有将近一亿行（ 8、 9 千万，具体不详，一般开发中也没人会特别关心这个问题）

10. 你们处理数据是直接读数据库的数据还是读文本数据？
将日志数据导入到 hdfs 之后进行处理

11. 你们写 hive 的 hql 语句，大概有多少条？
不清楚，我自己写的时候也没有做过统计

12. 你们提交的 job 任务大概有多少个？这些 job 执行完大概用多少时间？
没统计过，加上测试的，会有很多

13. 你在项目中主要的工作任务是？
利用 hive 分析数据

14. 你在项目中遇到了哪些难题，是怎么解决的？
某些任务执行时间过长，且失败率过高，检查日志后发现没有执行完就失败，原因出在hadoop 的 job 的 timeout 过短（相对于集群的能力来说），设置长一点即可

15. 你自己写过 udf 函数么？写了哪些？
UDF函数：用户自定义的函数(主要解决格式，计算问题)，需要继承UDF类
java代码实现
class TestUDFHive extends UDF {
public String evalute(String str){
try{
   return "hello"+str
}catch(Exception e){
   return str+"error"
}}}

16. 你的项目提交到 job 的时候数据量有多大？


17. 数据备份, 你们是多少份, 如果数据超过存储容量, 你们怎么处理？

18. 怎么提升多个 JOB 同时执行带来的压力, 如何优化, 说说思路？

19. 你们用 HBASE 存储什么数据？

20. 你们的 hive 处理数据能达到的指标是多少？

21. 你们的 hbase 大概在公司业务中（主要是网上商城）大概都几个表，几个表簇，都存什么样的数据？

##Hadoop面试题系列(4/11)

1.文件大小默认为64M，改为128M有啥影响？
1.减轻了namenode的压力
原因是hadoop集群在启动的时候，datanode会上报自己的block的信息给namenode。namenode把这些信息放到内存中。那么如果块变大了，那么namenode的记录的信息相对减少，所以namenode就有更多的内存去做的别的事情，使得整个集群的性能增强。
2.增大会不会带来负面相应。
因为这个可以灵活设置，所以这里不是问题。关键是什么时候，该如何设置。
如果对于数两级别为PB的话，建议可以block设置的大一些。
如果数据量相对较少，可以设置的小一些64M也未尝不可。
负面效应，如果网络环境不好，可能会造成重新传输。

2.RPC的原理？
socket IO流来进行server和client的通信，也就是rpc应用中服务提供方和服务消费方。并且是端对端的，用端口号来直接进行通信。方法的远程调用使用的是jdk的动态代理，参数的序列化也是使用的最简单的objectStream。
3.NameNode与SecondaryNameNode的区别与联系？
在hadoop中，namenode负责对HDFS的metadata的持久化存储，并且处理来自客户端的对HDFS的各种操作的交互反馈。为了保 证交互速度，HDFS文件系统的metadata是被load到namenode机器的内存中的，并且会将内存中的这些数据保存到磁盘进行持久化存储。为 了保证这个持久化过程不会成为HDFS操作的瓶颈，hadoop采取的方式是：没有对任何一次的当前文件系统的snapshot进行持久化，对HDFS最 近一段时间的操作list会被保存到namenode中的一个叫Editlog的文件中去。当重启namenode时，除了 load fsImage意外，还会对这个EditLog文件中 记录的HDFS操作进行replay，以恢复HDFS重启之前的最终状态。
而SecondaryNameNode，会周期性的将EditLog中记录的对HDFS的操作合并到一个checkpoint中，然后清空 EditLog。所以namenode的重启就会Load最新的一个checkpoint，并replay EditLog中 记录的hdfs操作，由于EditLog中记录的是从 上一次checkpoint以后到现在的操作列表，所以就会比较小。如果没有snn的这个周期性的合并过程，那么当每次重启namenode的时候，就会 花费很长的时间。而这样周期性的合并就能减少重启的时间。同时也能保证HDFS系统的完整性。
这就是SecondaryNameNode所做的事情。所以snn并不能分担namenode上对HDFS交互性操作的压力。尽管如此，当 namenode机器宕机或者namenode进程出问题时，namenode的daemon进程可以通过人工的方式从snn上拷贝一份metadata 来恢复HDFS文件系统。

4.介绍MadpReduce整个过程，比如把WordCount的例子的细节将清楚（重点讲解Shuffle）？
--------
宏观上MapReduce可以分为以下三个阶段,如下图1所示。
阶段1：input/map/partition/sort/spilt
阶段2：mapper端merge
阶段3：reducer端merge/reduce/output
以下分别对上述三个阶段详解。首先是Mapper端的执行逻辑，主要包含以下三点，如图2所示：
1. 将key/value/Partition写入到内存缓冲区中
2. 当缓冲区使用量达到一定阀值，将其spill到disk上，spill前，需要进行排序
3. 排序时先按照Partition进行排序，再按照key进行排序，默认排序算法是快速排序。
接下来是Map端的归并实现，主要包含以下两点，如图3所示。
1.对生成的多个spill文件，进行归并排序
2.最终归并成一个大文件
注意：
1. 由于每一个spill文件都是按分区和key排序好的，所以归并完的文件也是按分区和key排序好的。
2.在进行归并的时候，不是一次性的把所有的spill文件归并成一个大文件。而是部分spill文件归并成中间文件，然后中间文件和剩下的spill文件再进行归并。
最后是Reducer端的Merge和Reduce，主要包含以下三点，如图4所示：
1. 当有新的MapTask事件完成时，拷贝线程从指定的机器上面拷贝数据
2. 当数据拷贝的时候，分两种情况，当数据量小的时候就会写入内存当中，当数据量大的时候就会写入硬盘当中
3. 来自不同的机器的多个数据文件，需要归并成一个文件.在拷贝文件过程中会进行文件归并操作.
------------

5.MapReduce出现单点负载多大，怎么负载平衡？
数据倾斜：map /reduce程序执行时，reduce节点大部分执行完毕，但是有一个或者几个reduce节点运行很慢，导致整个程序的处理时间很长，这是因为某一个key的条数比其他key多很多（有时是百倍或者千倍之多），这条key所在的reduce节点所处理的数据量比其他节点就大很多，从而导致某几个节点迟迟运行不完，此称之为数据倾斜。
用hadoop程序进行数据关联时，常碰到数据倾斜的情况，这里提供一种解决方法。
自己实现partition类，用key和value相加取hash值：
public int getPartition(K key, V value,int numReduceTasks) {
    return ((（key).hashCode()+value.hashCode()） & Integer.MAX_VALUE) % numReduceTasks;
}

6.MapReduce怎么实现Top10？
1. Mappers
使用默认的mapper数据，一个input split（输入分片）由一个mapper来处理。
在每一个map task中，我们找到这个input split的前k个记录。这里我们用TreeMap这个数据结构来保存top K的数据，这样便于更新。下一步，我们来加入新记录到TreeMap中去（这里的TreeMap我感觉就是个大顶堆）。在map中，我们对每一条记录都尝试去更新TreeMap，最后我们得到的就是这个分片中的local top k的k个值。在这里要提醒一下，以往的mapper中，我们都是处理一条数据之后就context.write或者output.collector一次。而在这里不是，这里是把所有这个input split的数据处理完之后再进行写入。所以，我们可以把这个context.write放在cleanup里执行。cleanup就是整个mapper task执行完之后会执行的一个函数。

2.reducers
由于我前面讲了很清楚了，这里只有一个reducer，就是对mapper输出的数据进行再一次汇总，选出其中的top k，即可达到我们的目的

7.hadoop底层存储设计

8.zookeeper有什么优点，用在什么场合

9.Hbase中的metastore用来做什么的？
元数据 他们分别维护者当前集群所有region 的列表、状态和位置。
10.HBase在进行模型设计时重点在什么地方？一张表中国定义多少个Column Family最合适？为什么？
rowkey 因为hbase是列式数据库，列非表schema的一部分，所以在设计初期只需要考虑rowkey 和 columnFamily即可，rowkey有位置相关性，所以如果数据是练习查询的，最好对同类数据加一个前缀，而每个columnFamily实际上在底层是一个文件，那么文件越小，查询越快，所以讲经常一起查询的列设计到一个列簇，但是列簇不宜过多。
11.如何提高HBase客户端的读写性能？请举例说明。
（1）       开启bloomfilter过滤器，开启bloomfilter比没开启要快3、4倍
（2）       hbase对于内存有特别的嗜好，在硬件允许的情况下配足够多的内存给它
通过修改hbase-env.sh中的
export HBASE_HEAPSIZE=3000 #这里默认为1000m
（3）       修改java虚拟机属性
替换掉默认的垃圾回收器，因为默认的垃圾回收器在多线程环境下会有更多的wait等待   
5）       增大RPC数量


12.在hadoop开发过程中使用过哪些算法？其应用场景是什么？
http://www.aboutyun.com/thread-8235-1-1.html
算法一：快速排序算法
算法二：堆排序算法
算法三：归并排序

13.MapReduce程序如何发布？如果MapReduce中涉及到了第三方的jar 包，该如何处理？
一起打进去
14.在实际工作中使用过哪些集群的运维工具，请分别阐述其作用。

##Hadoop面试题系列(5/11)
1、map方法是如何调用reduce方法的？
shuffle  map执行完成有输出文件产生，shuffle开始；
2、fsimage和edit的区别？
--
simage保存了最新的元数据检查点。
edits保存自最新检查点后的命名空间的变化。
2、工作原理：
从最新检查点后，hadoop将对每个文件的操作都保存在edits中，为避免edits不断增大，secondary namenode就会周期性合并fsimage和edits成新的fsimage，edits再记录新的变化。
这种机制有个问题：因edits存放在Namenode中，当Namenode挂掉，edits也会丢失，导致利用secondary namenode恢复Namenode时，会有部分数据丢失。
--
3、hadoop1和hadoop2的区别？

4、列举几个配置文件优化？

5、写出你对zookeeper的理解

6、datanode首次加入cluster的时候，如果log报告不兼容文件版本，那需要namenode执行格式化操作，这样处理的原因是？
元数据进行初始化
7、hbase 集群安装注意事项
1. 描述 HBase 搭建过程
1.1 下载和解压
1.2 配置集群并安装ZK集群
由于HBase最终存储数据到DataNode上，故需hadoop的hdfs-site.xml、core-site.xml拷贝到hbase/conf下
1.3 修改hbase-env.sh配置文件和hbase-site.xml
修改hbase-env.sh 设置JAVA_HOME和修改HBASE_MANAGES_ZK=false，使用外部ZK.
修改hbase-site.xml 配置文件，指定hdfs存储路径和ZK
1.4 修改regionservers 配置文件
指定HRegionServer的节点，放在regionservers配置文件中
1.5 启动HBase
启动ZK
启动HDFS集群
启动HBase
2. HBase 集群安装注意事项(2)
主要hbase-env.sh 配置文件，HBASE_MANAGES_ZK=false，设置外部HBase使用外部的ZK，默认情况下是true。


##Hadoop面试题系列(6/11)
1. 简单说说map端和reduce端溢写的细节
map：
每个map task都有一个内存缓冲区，存储着map的输出结果，这个内存缓冲区是有大小限制的，默认是100MB。当map task的输出结果很多时，就可能会撑爆内存，所以需要在一定条件下将缓冲区中的数据临时写入磁盘，然后重新利用这块缓冲区。这个从内存往磁盘写数据的过程被称为Spill，中文可译为溢写。当整个map task结束后再对磁盘中这个map task产生的所有临时文件做合并（因为最终的文件只有一个，所以需要将这些溢写文件归并到一起，这个过程就叫做Merge），生成最终的正式输出文件，然后等待reduce task来拉数据。 
（这个溢写是由单独线程来完成，不影响往缓冲区写map结果的线程。溢写线程启动时不应该阻止map的结果输出，所以整个缓冲区有个溢写的比例spill.percent。这个比例默认是0.8，也就是当缓冲区的数据已经达到阈值（buffer size * spill percent = 100MB * 0.8 = 80MB），溢写线程启动，锁定这80MB的内存，执行溢写过程。Map task的输出结果还可以往剩下的20MB内存中写，互不影响。 ）
reduce：
reduce需要将map端的结果拉过来写入内存缓冲区中，当内存中的数据量到达一定阈值，就启动内存到磁盘的merge。与map 端类似，这也是溢写的过程。
2. hive的物理模型跟传统数据库有什么不同

1. 读时模式  vs 写时模式
传统数据库是在数据写入数据库的时候对照模式进行检查，因此，这以设计模式被称为“写时模式” （schema on write）
而Hive是在读出数据，也就是查询的时候读数据进行检查，这称为“读时模式” （schema on read）。

2.更新、事务及索引
Hive不支持更新（或删除），但支持INSERT INTO，可以向现有表中增加新的行
目前Hive已支持索引，加快了查询速度，Hive索引分成两类，：紧凑（compact）索引和位图（bitmap）索引。
紧凑索引存储每个值的HDFS块号，而不是存储文件内偏移量，因此存储不会占用过多的磁盘空间，而且对于值被聚簇（clustered）存储于相近行的情况，索引任然有效。
位图索引使用压缩的位集合（bitset）来高效存储具有某个特殊值的行。这种索引一般适合于具有较少取值可能（low-cardinality）的列。

3. 描述一下hadoop机架感知
机架感知是一种计算不同计算节点（TT）的距离的技术，用以在任务调度过程中尽量减少网络带宽资源的消耗，这里用尽量，想表达的是当一个TT申请不到本地化任务时，JT会尽量调度一个机架的任务给他，因为不同机架的网络带宽资源比同一个机架的网络带宽资源更可贵。当然，机架感知不仅仅用在MR中，同样还用在HDFS数据块备份过程中（第一个replica选择本节点【如果上传是DataNode】或者随机的一个DN（系统会尽量避免存储太满和太忙的节点），第二个节点选择于第一个节点不同机架的DN，第三个选择放在第二个DN同一个机架的另一个DN上）
4. 对于mahout，如何进行推荐、分类、聚类的代码二次开发分别实现那些接口

5. 直接将时间戳作为行健，在写入单个region 时候会发生热点问题，为什么呢？
HBase的rowkey在底层是HFile存储数据的，以键值对存放到SortedMap中。并且region中的rowkey是有序存储，若时间比较集中。就会存储到一个region中，这样一个region的数据变多，其它的region数据很好，加载数据就会很慢。直到region分裂可以解决。

1. 比方:如今有10个文件夹, 每个文件夹都有1000000个url. 如今让你找出top1000000url。
方法一：
运用2个job，第一个job直接用filesystem读取10个文件夹作为map输入，url做key，reduce计算url的sum，
下一个job map用url作key，运用sum作二次排序，reduce中取top10000000

方法二：
建hive表A，挂分区channel，每个文件夹是一个分区.
select x.url,x.c from(select url,count(1) as c from A where channel ='' group by url) x order by x.c desc limit 1000000;

2.如果让你设计，你觉得一个分布式文件系统应该如何设计，考虑哪方面内容？

##Hadoop面试题系列(7/11)

1. 下面哪个程序负责 HDFS 数据存储
a)NameNode b)Jobtracker c)Datanode d)secondaryNameNode e)tasktracker
答案：C datanode

2. HDfS 中的 block 默认保存几份？
a)3 份 b)2 份 c)1 份d)不确定
答案:A 默认3份

3. 下列哪个程序通常与 NameNode在一个节点启动？
a)SecondaryNameNode b)DataNode c)TaskTracker d)Jobtracker
答案：D
分析：
hadoop的集群是基于master/slave模式，namenode和jobtracker属于master，datanode和tasktracker属于slave，master只有一个，而slave有多个
SecondaryNameNode内存需求和NameNode在一个数量级上，所以通常secondary NameNode（运行在单独的物理机器上）和NameNode运行在不同的机器上。
JobTracker对应于NameNode，TaskTracker对应于DataNode
DataNode和NameNode是针对HDFS数据存放来而言的，JobTracker和TaskTracker是对于MapReduce执行而言的

mapreduce中几个主要概念，mapreduce整体上可以分为这么几条执行线索：jobclient，JobTracker与TaskTracker。
(1)、JobClient会在用户端通过JobClient类将应用已经配置参数打包成jar文件存储到hdfs，
并把路径提交到Jobtracker,然后由JobTracker创建每一个Task（即MapTask和ReduceTask）并将它们分发到各个TaskTracker服务中去执行
(2)、JobTracker是一个master服务，软件启动之后JobTracker接收Job，负责调度Job的每一个子任务task运行于TaskTracker上，
并监控它们，如果发现有失败的task就重新运行它。一般应该把JobTracker部署在单独的机器上。
(3)、TaskTracker是运行在多个节点上的slaver服务。TaskTracker主动与JobTracker通信，接收作业，并负责直接执行每一个任务。
TaskTracker都需要运行在HDFS的DataNode上

4. Hadoop作者
a)Martin Fowler b)Kent Beck c)Doug cutting +
答案：C Doug cutting

5. HDFS默认Block Size
a)32MB b)64MB c)128MB
答案：B(Hadoop 1.x是64MB；Hadoop 2.x都128了。)

6. 下列哪项通常是集群的最主要瓶颈
a)CPU b)网络 c)磁盘IO d)内存
答案：C磁盘
分析：
首先集群的目的是为了节省成本，用廉价的pc机，取代小型机及大型机。cpu处理能力强, 内存够大, 所以集群的瓶颈不可能是a和d; 网络是一种稀缺资源，但是并不是瓶颈。由于大数据面临海量数据，读写数据都需要io，然后还要冗余数据，hadoop一般备3份数据，所以IO就会打折扣。对于磁盘IO：当我们面临集群作战的时候，我们所希望的是即读即得。可是面对大数据，读取数据需要经过IO，这里可以把IO理解为水的管道。管道越大越强，我们对于T级的数据读取就越快。所以IO的好坏，直接影响了集群对于数据的处理。

7. 关于SecondaryNameNode哪项是正确的？
a)它是NameNode的热备 b)它对内存没有要求
c)它的目的是帮助NameNode合并编辑日志，减少NameNode启动时间
d)SecondaryNameNode应与NameNode部署到一个节点
答案C。
8. 下列哪项可以作为集群的管理？
a)Puppet b)Pdsh c)Cloudera Manager d)Zookeeper
答案：ABC
分析：
A：puppetpuppet是一种Linux、Unix、windows平台的集中配置管理系统
B：pdsh可以实现在在多台机器上执行相同的命令
详细参考：集群管理小工具介绍-pdsh
C：可以参考Cloudera Manager四大功能
首先这里给管理下一个定义：部署、配置、调试、监控，属于管理，因为zookeeper不满足上面要求，所以不纳入管理范围。

9. 配置机架感知的下面哪项正确
a)如果一个机架出问题，不会影响数据读写
b)写入数据的时候会写到不同机架的 DataNode 中
c)MapReduce会根据机架获取离自己比较近的网络数
答案：ABC

10. Client 端上传文件的时候下列哪项正确
a)数据经过 NameNode 传递给 DataNode
b)Client端将文件切分为Block，依次上传
c)Client只上传数据到一台DataNode，然后由NameNode负责Block复制工作
答案：B
分析：
Client向NameNode发起文件写入的请求。NameNode根据文件大小和文件块配置情况，返回给Client它所管理部分DataNode的信息。
Client将文件划分为多个Block，根据DataNode的地址信息，按顺序写入到每一个DataNode块中。

11. 下列哪个是 Hadoop 运行的模式
a)单机版 b)伪分布式 c)分布式
答案：ABC

12. Cloudera 提供哪几种安装 CDH 的方法
a)Cloudera manager b)Tarball c)Yum d)Rpm
答案：ABCD具体可以参考
Hadoop CDH四种安装方式总结及实例指导

13. Ganglia不仅可以进行监控，也可以进行告警。（正确）
分析：
此题的目的是考Ganglia的了解。严格意义上来讲是正确。
ganglia作为一款最常用的Linux环境中的监控软件，它擅长的的是从节点中按照用户的需求以较低的代价采集数据。但是ganglia在预警以及发生事件后通知用户上并不擅长。最新的ganglia已经有了部分这方面的功能。但是更擅长做警告的还有Nagios。Nagios，就是一款精于预警、通知的软件。通过将Ganglia和Nagios组合起来，把Ganglia采集的数据作为Nagios的数据源，然后利用Nagios来发送预警通知，可以完美的实现一整套监控管理的系统。

14. Block Size是不可以修改的。（错误）
它是可以被修改的
Hadoop的基础配置文件是hadoop-default.xml，默认建立一个Job的时候会建立Job的Config，Config首先读入hadoop-default.xml的配置，然后再读入hadoop-site.xml的配置（这个文件初始的时候配置为空），hadoop-site.xml中主要配置需要覆盖的hadoop-default.xml的系统级配置。具体配置可以参考下

<property>  
  <name>dfs.block.size</name>  
  <value>5120000</value>  
  <description>The default block size for new files.</description>  
</property>  
// block的大小，单位字节，后面会提到用处，必须是512的倍数，因为采用crc作文件完整性校验，默认配置512是checksum的最小单元。  
15. Nagios不可以监控Hadoop集群，因为它不提供 Hadoop 支持。（错误）
分析：Nagios是集群监控工具，而且是云计算三大利器之一

16. 如果NameNode意外终止，SecondaryNameNode会接替它使集群继续工作。（错误）
分析：
SecondaryNameNode是帮助恢复，而不是替代，如何恢复，可以查看

17. Cloudera CDH 是需要付费使用的。（错误）
分析：
第一套付费产品是Cloudera Enterpris，Cloudera Enterprise在美国加州举行的 Hadoop 大会 (Hadoop Summit) 上公开，以若干私有管理、监控、运作工具加强 Hadoop 的功能。收费采取合约订购方式，价格随用的 Hadoop 叢集大小变动。

18. Hadoop是Java开发的，所以MapReduce只支持Java语言编写。（错误）

19. Hadoop 支持数据的随机读写。（错）
分析：
lucene是支持随机读写的，而hdfs只支持随机读。但是HBase可以来补救。HBase提供随机读写，来解决Hadoop不能处理的问题。
HBase自底层设计开始即聚焦于各种可伸缩性问题：表可以很“高”，有数十亿个数据行；也可以很“宽”，有数百万个列；水平分区并在上千个普通商用机节点上自动复制。表的模式是物理存储的直接反映，使系统有可能提高高效的数据结构的序列化、存储和检索。

20. NameNode 负责管理 metadata，client 端每次读写请求，它都会从磁盘中读取或则会写入 metadata 信息并反馈 client 端。（错误）
分析：
NameNode 不需要从磁盘读取 metadata，所有数据都在内存中，硬盘上的只是序列化的结果，只有每次 namenode 启动的时候才会读取。
(1) 文件写入
Client向NameNode发起文件写入的请求。
NameNode根据文件大小和文件块配置情况，返回给Client它所管理部分DataNode的信息。
Client将文件划分为多个Block，根据DataNode的地址信息，按顺序写入到每一个DataNode块中。

(2) 文件读取
Client向NameNode发起文件读取的请求。
NameNode返回文件存储的DataNode的信息。
Client读取文件信息。

21. NameNode 本地磁盘保存了 Block 的位置信息。（正确）
分析：
DataNode是文件存储的基本单元，它将Block存储在本地文件系统中，保存了Block的Meta-data，同时周期性地将所有存在的Block信息发送给NameNode。

22. DataNode 通过长连接与 NameNode 保持通信。
这个有分歧，首先明确一下概念：
(1) 长连接
Client方与Server方先建立通讯连接，连接建立后不断开，然后再进行报文发送和接收。这种方式下由于通讯连接一直存在，此种方式常用于点对点通讯。

(2) 短连接
Client方与Server每进行一次报文收发交易时才进行通讯连接，交易完毕后立即断开连接。此种方式常用于一点对多点通讯，比如多个Client连接一个Server.

23. Hadoop 自身具有严格的权限管理和安全措施保障集群正常运行。（错误）
hadoop只能阻止好人犯错，但是不能阻止坏人干坏事

24. Slave 节点要存储数据，所以它的磁盘越大越好。（错误）
分析：
一旦Slave节点宕机，数据恢复是一个难题

25. hadoop dfsadmin –report 命令用于检测 HDFS 损坏块。（错误）
分析：
hadoop dfsadmin -report
用这个命令可以快速定位出哪些节点down掉了，HDFS的容量以及使用了多少，以及每个节点的硬盘使用情况。

26. Hadoop 默认调度器策略为 FIFO（正确）

27. 集群内每个节点都应该配 RAID，这样避免单磁盘损坏，影响整个节点运行。（错误）
分析：
首先明白什么是RAID，可以参考百科磁盘阵列。这句话错误的地方在于太绝对，具体情况具体分析。题目不是重点，知识才是最重要的。因为hadoop本身就具有冗余能力，所以如果不是很严格不需要都配备RAID。具体参考第二题。

28. 因为 HDFS 有多个副本，所以 NameNode 是不存在单点问题的。（错误）
分析：
NameNode存在单点问题。了解详细信息，可以参考
Hadoop中Namenode单点故障的解决方案及详细介绍AvatarNode

29. 每个 map 槽就是一个线程。（错误）
分析：首先我们知道什么是map槽,map槽->map slot
map slot只是一个逻辑值 ( org.apache.hadoop.mapred.TaskTracker.TaskLauncher.numFreeSlots )，而不是对应着一个线程或者进程

30. Mapreduce 的 input split 就是一个 block。（错误 ）
InputFormat的数据划分、Split调度、数据读取三个问题的浅析

31. NameNode 的 Web UI 端口是 50030，它通过 jetty 启动的 Web 服务。（错误 ）
分析：
根据下面，很显然JOBTRACKER的 Web UI 端口是 50030

端口说明：  
默认端口    设置位置                                                                                                    
9000    namenode                                                                                                  
8020    namenode                                                                                                  
8021    JT RPC                                                                                                      
50030   mapred.job.tracker.http.address JobTracker administrative web GUI        
50070   dfs.http.address NameNode administrative web GUI                                 
50010   dfs.datanode.address DataNode control port                  
50020   dfs.datanode.ipc.address DataNode IPC port, used for block transfer       
50060   mapred.task.tracker.http.address Per TaskTracker web interface             
50075   dfs.datanode.http.address Per DataNode web interface                            
50090   dfs.secondary.http.address Per secondary NameNode web interface        
   
设置位置              描述信息  
namenode              交互端口  
namenode              RPC交互端口  
JT RPC                交互端口  
mapred.job.tracker.http.address JobTracker administrative web GUI     JOBTRACKER的HTTP服务器和端口  
dfs.http.address NameNode administrative web GUI                              NAMENODE的HTTP服务器和端口  
dfs.datanode.address DataNode control port               DATANODE控制端口，主要用于DATANODE初始化时向NAMENODE提出注册和应答请求  
dfs.datanode.ipc.address DataNode IPC port, used for block transfer    DATANODE的RPC服务器地址和端口  
mapred.task.tracker.http.address Per TaskTracker web interface           TASKTRACKER的HTTP服务器和端口  
dfs.datanode.http.address Per DataNode web interface                          DATANODE的HTTP服务器和端口  
dfs.secondary.http.address Per secondary NameNode web interface     辅助DATANODE的HTTP服务器和端口  
32. Hadoop 环境变量中的 HADOOP_HEAPSIZE 用于设置所有 Hadoop 守护线程的内存。它默认是 200 GB。（ 错误）

hadoop为各个守护进程（namenode,secondarynamenode,jobtracker,datanode,tasktracker）统一分配的内存在hadoop-env.sh中设置，参数为HADOOP_HEAPSIZE，默认为1000M。

33. DataNode 首次加入 cluster 的时候，如果 log 中报告不兼容文件版本，那需要NameNode执行“Hadoop namenode -format”操作格式化磁盘。（错误 ）
分析：
这个报错是说明DataNode所装的Hadoop版本和其它节点不一致，应该检查DataNode的Hadoop版本


##Hadoop面试题系列(8/11)

1.hive如何调优？
(1)hive使用：仓库、工具
(2)hive内外部表：内部表数据永久删除，外部表数据删除后、其他人依然可以访问
(3)分区作用：防止数据倾斜
(4)UDF函数：用户自定义的函数(主要解决格式，计算问题)，需要继承UDF类
java代码实现
class TestUDFHive extends UDF {
public String evalute(String str){
try{
   return "hello"+str
}catch(Exception e){
   return str+"error"
}
}
}
(5)Hive优化：看做mapreduce处理
 a\排序优化：sort by 效率高于 order by
 b\分区：使用静态分区 (statu_date="20160516",location="beijin")，每个分区对应hdfs上的一个目录
 c\减少job和task数量：使用表链接操作
 d\解决groupby数据倾斜问题：设置hive.groupby.skewindata=true ，那么hive会自动负载均衡
 e\小文件合并成大文件：表连接操作
 f\使用UDF或UDAF函数：http://www.cnblogs.com/ggjucheng/archive/2013/02/01/2888819.html
 
2.hive如何权限控制？
http://www.jianshu.com/p/e5b80c3e7269
3.hbase写数据的原理是什么？

4.hive能像关系数据库那样，建多个库吗？

5.hbase宕机如何处理？
HBase的RegionServer宕机超过一定时间后，HMaster会将其所管理的region重新分布到其他活动的RegionServer上，由于数据和日志都持久在HDFS中，
该操作不会导致数据丢失。所以数据的一致性和安全性是有保障的。
但是重新分配的region需要根据日志恢复原RegionServer中的内存MemoryStore表，这会导致宕机的region在这段时间内无法对外提供服务。
而一旦重分布，宕机的节点重新启动后就相当于一个新的RegionServer加入集群，为了平衡，需要再次将某些region分布到该server。 
因此，Region Server的内存表memstore如何在节点间做到更高的可用，是HBase的一个较大的挑战。
6.hive实现统计的查询语句是什么？
select word,count(word) as count from table_a groupby word order by count desc limit 5;
7.生产环境中为什么建议使用外部表？
内部表：放在hive数据库中，drop表，里面的数据文件也删除
外部表，放在hdfs的文件中，drop表，仅删除hive的元数据，hdfs的数据文件还在
8.hadoop mapreduce创建类DataWritable的作用是什么？
用于序列化和反序列化
9.为什么创建类DataWritable？

1.假设公司要建一个数据中心，你会如何规划？

2.用Hadoop分析海量日志文件，每行日志记录了如下数据：
TableName(表名)，Time(时间)，User(用户)，TimeSpan(时间开销)。

要求：
编写MapReduce程序算出高峰时间段（如上午10 点）哪张表被访问的最频繁，以及这段时间访问这张表最多的用户，以及这个用户的总时间开销。


##Hadoop面试题系列(9/11)
1. 用mapreduce实现sql语句select count(x) from a group by b？

2. 简述MapReduce大致流程，map -> shuffle -> reduce

3. HDFS如何定位replica

4. Hadoop参数调优: cluster level: JVM, map/reduce slots, job level: reducer, memory, use combiner? use compression?

5. hadoop运行的原理？

6. mapreduce的原理？

7. HDFS存储的机制？

8. 如何确认Hadoop集群的健康状况？

现有1 亿个整数均匀分布，如果要得到前1K 个最大的数，求最优的算法。（先不考虑内存的限制，也不考虑读写外存，时间复杂度最少的算法即为最优算法）

我先说下我的想法:分块，比如分1W块，每块1W个，然后分别找出每块最大值，从这最大的1W个值中找最大1K个，那么其他的9K 个最大值所在的块即可扔掉，从剩下的最大的1K 个值所在的块中找前1K个即可。那么原问题的规模就缩小到了1/10。
问题：
(1) 这种分块方法的最优时间复杂度。
(2) 如何分块达到最优。比如也可分10W 块，每块1000 个数。则问题规模可降到原来1/100。但事实上复杂度并没降低。
(3) 还有没更好更优的方法解决这个问题。

##
Hadoop面试题系列(10/11)
1) datanode在什么情况下不会备份？
在配置文件中datanode的数量设置为1时
2) hdfs的体系结构？
HDFS采用了主从（Master/Slave）结构模型，一个HDFS集群是由一个NameNode和若干个DataNode组成的。其中NameNode作为主服务器，管理文件系统的命名空间和客户端对文件的访问操作；集群中的DataNode管理存储的数据。HDFS允许用户以文件的形式存储数据。从内部来看，文件被分成若干个数据块，而且这若干个数据块存放在一组DataNode上。NameNode执行文件系统的命名空间操作，比如打开、关闭、重命名文件或目录等，它也负责数据块到具体DataNode的映射。DataNode负责处理文件系统客户端的文件读写请求，并在NameNode的统一调度下进行数据块的创建、删除和复制工作。图1-3给出了HDFS的体系结构。
3) sqoop在导入数据到mysql时，如何让数据不重复导入？如果存在数据问题sqoop如何处理？
1. 将业务库抽数、数据除重做成公共模版，开发人员要抽数、除重时填写统一调度平台的任务调度配置信息表，此部分信息存在调度平台数据库，另外还要填写任务调度相关的参数，这块存在hdfs中的properties文件中

2. 统一调度平台向Hadoop下发调度作业，调度作业至少要包含调度任务的任务名称

3. Hadoop接收到任务名称后从hdfs的properties文件中解析出所需参数，然后构造取数或除重命令，最后执行命令
4) 请列举曾经修改过的/etc下的配置文件，并说明修改要解决的问题？

5) 描述一下hadoop中，有哪些地方使用了缓存机制，作用分别是什么？
Hadoop DistributedCache有以下几种典型的应用场景：1）分发字典文件，一些情况下Mapper或者Reducer需要用到一些外部字典，比如黑白名单、词表等；2）map-side join：当多表连接时，一种场景是一个表很大，一个表很小，小到足以加载到内存中，这时可以使用DistributedCache将小表分发到各个节点上，以供Mapper加载使用；3）自动化软件部署：有些情况下，MapReduce需依赖于特定版本的库，比如依赖于某个版本的PHP解释器，一种做法是让集群管理员把这个版本的PHP装到各个机器上，这通常比较麻烦，另一种方法是使用DistributedCache分发到各个节点上，程序运行完后，Hadoop自动将其删除。
1、使用Hive或者自定义MR实现如下逻辑

product_no lac_id moment start_time user_id county_id staytime city_id  
13429100031 22554 8 2013-03-11 08:55:19.151754088 571 571 282 571  
13429100082 22540 8 2013-03-11 08:58:20.152622488 571 571 270 571  
13429100082 22691 8 2013-03-11 08:56:37.149593624 571 571 103 571  
13429100087 22705 8 2013-03-11 08:56:51.139539816 571 571 220 571  
13429100087 22540 8 2013-03-11 08:55:45.150276800 571 571 66 571  
13429100082 22540 8 2013-03-11 08:55:38.140225200 571 571 133 571  
13429100140 26642 9 2013-03-11 09:02:19.151754088 571 571 18 571  
13429100082 22691 8 2013-03-11 08:57:32.151754088 571 571 287 571  
13429100189 22558 8 2013-03-11 08:56:24.139539816 571 571 48 571  
13429100349 22503 8 2013-03-11 08:54:30.152622440 571 571 211 571  
字段解释：
product_no：用户手机号；
lac_id：用户所在基站；
start_time：用户在此基站的开始时间；
staytime：用户在此基站的逗留时间。

需求描述：
根据lac_id和start_time知道用户当时的位置，根据staytime 知道用户各个基站的逗留时长。根据轨迹合并连续基站的staytime。最终得到每一个用户按时间排序在每一个基站驻留时长

期望输出举例：

13429100082 22540 8 2013-03-11 08:58:20.152622488 571 571 270 571  
13429100082 22691 8 2013-03-11 08:56:37.149593624 571 571 390 571  
13429100082 22540 8 2013-03-11 08:55:38.140225200 571 571 133 571  
13429100087 22705 8 2013-03-11 08:56:51.139539816 571 571 220 571  
13429100087 22540 8 2013-03-11 08:55:45.150276800 571 571 660 571  
2、Linux 脚本能力考察

2.1 请随意使用各种类型的脚本语言实现：批量将指定目录下的所有文件中的$HADOOP_HOME替换成/home/ocetl/app/hadoop

2.2 假设有10 台主机，H1 到H10，在开启SSH互信的情况下，编写一个或多个脚本实现在所有的远程主机上执行脚本的功能。

例如：runRemoteCmd.sh "ls -l"
期望结果：

H1:
XXXXXXXX
XXXXXXXX
XXXXXXXX
H2:
XXXXXXXX
XXXXXXXX
XXXXXXXX
H3:
...
3、Java能力考察

3.1 写代码实现1G 大小的文本文件，行分隔符为\x01\x02,统计一下该文件中的总行数，要求注意边界情况的处理

3.2 请描述一下在开发中如何对上面的程序进行性能分析，对性能进行优化的过程。





