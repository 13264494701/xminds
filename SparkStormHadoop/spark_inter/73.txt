
watermark:
 
watermark是用于处理乱序事件的，而正确的处理乱序事件，通常用watermark机制结合window来实现。

我们知道，流处理从事件产生，到流经source，再到operator，中间是有一个过程和时间的。虽然大部分情况下，流到operator的数据都是按照事件产生的时间顺序来的，但是也不排除由于网络、背压等原因，导致乱序的产生（out-of-order或者说late element）。

但是对于late element，我们又不能无限期的等下去，必须要有个机制来保证一个特定的时间后，必须触发window去进行计算了。这个特别的机制，就是watermark。

state:中间状态管理
例如：

当应用程序针对特定事件模式进行搜索的时候，state将会存储到目前为止的一些列事件。
当每 分钟/小时/天 聚合事件的时候，state会持有所有等待聚合的数据。
当在一连串的数据流上训练机器学习模型时，state持有当前版本的模型参数。
当历史数据需要管理的时候，state允许高效的访问过去的数据
flink可以使用checkpoints对statue进行容错管理，并且允许对流应用程序执行savepoint。

groupby发生了什么:
groupby的入参为一个函数，函数返回key
传入的RDD的各个元素根据这个key进行分组
(涉及到df和structured streaming,核心在于表是有限还是无限)

窗口:
Tumbling Time Window
如上图，我们需要统计每一分钟中用户购买的商品的总数，需要将用户的行为事件按每一分钟进行切分，这种切分被成为翻滚时间窗口（Tumbling Time Window）。翻滚窗口能将数据流切分成不重叠的窗口，每一个事件只能属于一个窗口
Sliding Time Window
但是对于某些应用，它们需要的窗口是不间断的，需要平滑地进行窗口聚合。比如，我们可以每30秒计算一次最近一分钟用户购买的商品总数。这种窗口我们称为滑动时间窗口（Sliding Time Window）。在滑窗中，一个元素可以对应多个窗口
Session Window
在这种用户交互事件流中，我们首先想到的是将事件聚合到会话窗口中（一段用户持续活跃的周期），由非活跃的间隙分隔开。如上图所示，就是需要计算每个用户在活跃期间总共购买的商品数量，如果用户30秒没有活动则视为会话断开（假设raw data stream是单个用户的购买行为流）
