###一、Java相关
###
###Arraylist与LinkedList默认空间是多少；
 List 元素是有序的、可重复
ArrayList、Vector默认初始容量为10
List 元素是有序的、可重复
ArrayList、Vector默认初始容量为10
Vector：线程安全，但速度慢
底层数据结构是数组结构
加载因子为1：即当 元素个数 超过 容量长度 时，进行扩容
扩容增量：原容量的 1倍
如 Vector的容量为10，一次扩容后是容量为20
ArrayList：线程不安全，查询速度快
底层数据结构是数组结构
扩容增量：原容量的 0.5倍+1
如 ArrayList的容量为10，一次扩容后是容量为16
Set(集) 元素无序的、不可重复。
HashSet：线程不安全，存取速度快
底层实现是一个HashMap（保存数据），实现Set接口
默认初始容量为16（为何是16，见下方对HashMap的描述）
加载因子为0.75：即当 元素个数 超过 容量长度的0.75倍 时，进行扩容
扩容增量：原容量的 1 倍
如 HashSet的容量为16，一次扩容后是容量为32
构造方法摘要HashSet() 
HashSet(int initialCapacity)
构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和默认的加载因子（0.75）。
HashSet hs=new HashSet(1);
所以可见 HashSet类，创建对象的时候是可以的制定容量的大小的 ，期中第二个就具有这个工功能。
Map是一个双列集合
HashMap：默认初始容量为16
（为何是16：16是2^4，可以提高查询效率，另外，32=16<<1       -->至于详细的原因可另行分析，或分析源代码）
加载因子为0.75：即当 元素个数 超过 容量长度的0.75倍 时，进行扩容
扩容增量：原容量的 1 倍
如 HashSet的容量为16，一次扩容后是容量为32
Hashtable： 线程安全
默认初始容量为11
加载因子为0.75：即当 元素个数 超过 容量长度的0.75倍 时，进行扩容
扩容增量：原容量的 1 倍+1
如 Hashtable的容量为11，一次扩容后是容量为23
###Arraylist与LinkedList区别与各自的优势List 和 Map 区别；


###谈谈HashMap，哈希表解决hash冲突的方法；
###
###为什么要重写hashcode()和equals()以及他们之间的区别与关系；
###
###Object的hashcode()是怎么计算的？
###
###若hashcode方法永远返回1或者一个常量会产生什么结果？
首先，说一下这个“题目”中hashCode()返回常量1，重点在什么地方，重点在“常量”这两个字上，也就是说，每次使用java对象“.”hashCode()时，返回的都是相同的数值；
       其次，说下hashCode()的值并不一定是对象在内存地址或物理地址，但是初学者可以这么理解；
       第三，判断java对象的值是否相同的是equals方法，判断对象基本类型是否相同是用的==，而hashCode()这个方法也是比较对象是否相同的一个依据，
当hashCode()返回常量时，所有对象都出现hash冲突，而hashCode()本身的性能也会降级。
做hash的key的时候效率会极度变低。
变量比较也会变慢
###Java Collections和Arrays的sort方法默认的排序方法是什么；
java的Collections.sort算法调用的是合并排序，它是稳定排序，当数据接近有序的时候，效率更高collections中的数据在排序前需要输入到array中，接着调用Arrays.sort函数来完成对象排序，最近通过迭代器将数组中排好序的对象些人到collection中，这也要求collection必须为mutable类型的。
###引用计数法与GC Root可达性分析法区别；
1.引用数法
        引用计数法师垃圾收集的早期策略，在这中方法中，堆中每个对象都有一个引用计数，每当有一个地方引用他时，引用计数值就+1,当引用失效时，引用计数值就-1，任何时刻引用计数值为0的对象就是可以被回收，当一个对象被垃圾收集时，被它引用 的对象引用计数值就-1，所以在这种方法中一个对象被垃圾收集会导致后续其他对象的垃圾收集行动。
优点：判定效率高；
缺点：不完全准确，当两个对象相互引用的时候就无法回收，导致内存泄漏。
2.可达性分析算法
        这个算法的基本思路就是通过一系列名为"GC Roots"的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的，下图对象object5, object6, object7虽然有互相判断，但它们到GC Roots是不可达的，所以它们将会判定为是可回收对象。
###浅拷贝和深拷贝的区别；
###
###String s="abc"和String s=new String("abc")区别；
String s="abc";这里不会在堆中创建对象，首先在常量池寻找这个常量“abc”，如果没有“abc”则把abc存放到运行时常量池，然后把引用赋值给是s，如果有就直接把存在的地址赋值给s。
String s=new String("abc");首先在堆中创建对象，然后再把对象引用赋值给s。
###HashSet方法里面的hashcode存在哪，如果重写equals不重写hashcode会怎么样？
为什么需要重写equals和hashCode方法？
      在我们的业务系统中判断对象时有时候需要的不是一种严格意义上的相等，而是一种业务上的对象相等。在这种情况下，原生的equals方法就不能满足我们的需求了
      所以这个时候我们需要重写equals方法，来满足我们的业务系统上的需求。那么为什么在重写equals方法的时候需要重写hashCode方法呢？
      我们先来看一下Object.hashCode的通用约定（摘自《Effective Java》第45页）
在一个应用程序执行期间，如果一个对象的equals方法做比较所用到的信息没有被修改的话，那么，对该对象调用hashCode方法多次，它必须始终如一地返回 同一个整数。在同一个应用程序的多次执行过程中，这个整数可以不同，即这个应用程序这次执行返回的整数与下一次执行返回的整数可以不一致。
如果两个对象根据equals(Object)方法是相等的，那么调用这两个对象中任一个对象的hashCode方法必须产生同样的整数结果。
如果两个对象根据equals(Object)方法是不相等的，那么调用这两个对象中任一个对象的hashCode方法，不要求必须产生不同的整数结果。然而，程序员应该意识到这样的事实，对于不相等的对象产生截然不同的整数结果，有可能提高散列表（hash table）的性能。

     如果只重写了equals方法而没有重写hashCode方法的话，则会违反约定的第二条：相等的对象必须具有相等的散列码（hashCode）。
     同时对于HashSet和HashMap这些基于散列值（hash）实现的类。HashMap的底层处理机制是以数组的方法保存放入的数据的(Node<K,V>[] table)，其中的关键是数组下标的处理。数组的下标是根据传入的元素hashCode方法的返回值再和特定的值异或决定的。如果该数组位置上已经有放入的值了，且传入的键值相等则不处理，若不相等则覆盖原来的值，如果数组位置没有条目，则插入，并加入到相应的链表中。检查键是否存在也是根据hashCode值来确定的。所以如果不重写hashCode的话，可能导致HashSet、HashMap不能正常的运作、
    如果我们将某个自定义对象存到HashMap或者HashSet及其类似实现类中的时候，如果该对象的属性参与了hashCode的计算，那么就不能修改该对象参数hashCode计算的属性了。有可能会移除不了元素，导致内存泄漏。
###反射的作用与实现原理；
###
###Java中的回调机制；
###
###模板方法模式；
###
###开闭原则说一下；
###
###发布/订阅使用场景；
###
###KMP算法（一种改进的字符串匹配算法）；
###
###JMM里边的原子性、可见性、有序性是如何体现出来的，JMM中内存屏障是什么意思，
###
###二、多线程
###
###AtomicInteger底层实现原理；
###
###synchronized与ReentraLock哪个是公平锁；
###
###CAS机制会出现什么问题；
###
###用过并发包下边的哪些类；
###
###一个线程连着调用start两次会出现什么情况？
###
###wait方法能不能被重写，wait能不能被中断；
###
###线程池的实现？四种线程池？重要参数及原理？任务拒接策略有哪几种？
###
###线程状态以及API怎么操作会发生这种转换；
###
###常用的避免死锁方法；
###
###三、JVM
###
###Minor GC与Full GC分别在什么时候发生？什么时候触发Full GC;
###
###GC收集器有哪些？CMS收集器与G1收集器的特点。
###
###Java在什么时候会出现内存泄漏；
###
###Java中的大对象如何进行存储；
###
###rt.jar被什么类加载器加载，什么时间加载；
###
###自己写的类被什么加载，什么时间加载；
###
###自己写的两个不同的类是被同一个类加载器加载的吗？为什么？
###
###为什么新生代内存需要有两个Survivor区？
###
###几种常用的内存调试工具：jmap、jstack、jconsole；
###
###类加载的五个过程：加载、验证、准备、解析、初始化；
###
###G1停顿吗，CMS回收步骤，CMS为什么会停顿，停顿时间；
###
###栈主要存的数据是什么，堆呢？
###
###堆分为哪几块，比如说新生代老生代，那么新生代又分为什么？
###
###软引用和弱引用的使用场景（软引用可以实现缓存，弱引用可以用来在回调函数中防止内存泄露）；
###
###四、数据库
###
###数据库索引，什么是全文索引，全文索引中的倒排索引是什么原理；
###
###数据库最佳左前缀原则是什么？
###
###数据库的三大范式；
###
###悲观锁和乐观锁的原理和应用场景；
###
###左连接、右连接、内连接、外连接、交叉连接、笛卡儿积等；
###
###一般情况下数据库宕机了如何进行恢复（什么是Write Ahead Log机制，什么是Double Write机制，什么是Check Point）；
###
###什么是redo日志、什么是undo日志；
###
###数据库中的隔离性是怎样实现的；原子性、一致性、持久性又是如何实现的；
###
###什么是组合索引，组合索引什么时候会失效；
###
###关系型数据库和非关系型数据库区别；
###
###数据库死锁如何解决；
###
###MySQL并发情况下怎么解决（通过事务、隔离级别、锁）；
###
###MySQL中的MVCC机制是什么意思，根据具体场景，MVCC是否有问题；
###
###MySQL数据库的隔离级别，以及如何解决幻读；
###
###五、缓存服务器
###
###Redis中zSet跳跃表问题；
###
###Redis的set的应用场合？
###
###Redis高级特性了解吗？
###
###Redis的pipeline有什么用处？
###
###Redis集群宕机如何处理，怎么样进行数据的迁移；
###
###Redis的集群方案；
###
###Redis原子操作怎么用比较好；
###
###Redis过期策略是怎么实现的呢？
###
###六、SSM相关
###
###Spring中@Autowired和@Resource注解的区别？
###
###Spring声明一个 bean 如何对其进行个性化定制；
###
###MyBatis有什么优势；
###
###MyBatis如何做事务管理；
###
###七、操作系统
###
###Linux静态链接和动态链接；
###
###什么是IO多路复用模型（select、poll、epoll）；
###
###Linux中的grep管道用处？Linux的常用命令？
###
###操作系统中虚拟地址、逻辑地址、线性地址、物理地址的概念及区别；
###
###内存的页面置换算法；
###
###内存的页面置换算法；
###
###进程调度算法，操作系统是如何调度进程的；
###
###父子进程、孤儿进程、僵死进程等概念；
###
###fork进程时的操作；
###
###kill用法，某个进程杀不掉的原因（僵死进程；进入内核态，忽略kill信号）；
###
###系统管理命令（如查看内存使用、网络情况）；
###
###find命令、awk使用；
###
###Linux下排查某个死循环的线程；
###
###八、网络相关
###
###数据链路层是做什么的?
###
###数据链路层的流量控制？
###
###网络模型的分层、IP和Mac地址在那个层、TCP和HTTP分别在那个层；
###
###TCP滑动窗口；
###
###TCP为什么可靠；
###
###TCP的同传，拆包与组装包是什么意思；
###
###Https和Http有什么区别；
###
###Http 为什么是无状态的；
###
###TCP三次握手，为什么不是三次，为什么不是四次；
###
###TCP的拥塞控制、流量控制详细说明？
###
###Http1.0和Http2.0的区别；
###
###两个不同ip地址的计算机之间如何通信；
###
###地址解析协议ARP；
###
###OSI七层模型分别对应着五层模型的哪一部分；
###
###TCP三次握手数据丢失了怎么办？那如果后面又找到了呢？
###
###九、分布式相关
###
###消息队列使用的场景介绍和作用（应用耦合、异步消息、流量削锋等）；
###
###如何解决消息队列丢失消息和重复消费问题；
###
###Kafka使用过吗，什么是幂等性？怎么保证一致性，持久化怎么做，分区partition的理解，LEO是什么意思，如何保证多个partition之间数据一致性的（ISR机制），为什么Kafka可以这么快（基于磁盘的顺序读写）；
###
###异步队列怎么实现；
###
###你项目的并发是多少？怎么解决高并发问题？单机情况下Tomcat的并发大概是多少，MySQL的并发大致是多少？
###
###什么是C10K问题；
###
###高并发情况下怎么办；
###
###分布式理论，什么是CAP理论，什么是Base理论，什么是Paxos理论；
###
###分布式协议的选举算法；
###
###说一下你对微服务的理解，与SOA的区别；
###
###Dubbo的基本原理，RPC，支持哪些通信方式，服务的调用过程；
###
###Dubbo如果有一个服务挂掉了怎么办；
###
###分布式事务，操作两个表不在一个库，如何保证一致性。
###
###分布式系统中，每台机器如何产生一个唯一的随机值；
###
###系统的量级、pv、uv等；
###
###什么是Hash一致性算法？分布式缓存的一致性，服务器如何扩容（哈希环）；
###
###正向代理、反向代理；
###
###什么是客户端负载均衡策略、什么是服务器端负载均衡策略；
###
###如何优化Tomcat，常见的优化方式有哪些；
###
###Nginx的Master和Worker，Nginx是如何处理请求的；
###
###十、系统设计相关
###
###如何防止表单重复提交（Token令牌环等方式）；
###
###有一个url白名单，需要使用正则表达式进行过滤，但是url量级很大，大概亿级，那么如何优化正则表达式？如何优化亿级的url匹配呢？
###
###常见的Nginx负载均衡策略；已有两台Nginx服务器了，倘若这时候再增加一台服务器，采用什么负载均衡算法比较好？
###
###扫描二维码登录的过程解析；
###
###如何设计一个生成唯一UUID的算法？
###
###实现一个负载均衡的算法，服务器资源分配为70%、20%、10%；
###
###有三个线程T1 T2 T3，如何保证他们按顺序执行；
###
###三个线程循环输出ABCABCABC....
###
###十一、安全相关
###
###什么是XSS攻击，XSS攻击的一般表现形式有哪些？如何防止XSS攻击；
